
<% layout('layouts/boielerplate') %> 

<div id="map" style="width: 100%; height: 500px"></div>

<body>
    <h1>Tittle Name</h1>
    <div>
        <a href="/campground/new">Add Campground</a>
    </div>
    
        <% for(let c of cground){ %> 
            <div class="card" mb-3>
                <div class="row">
                    <div class="col-md-4">
                        <% if(c.images.length){ %> 
                        <img class="img-fluid" src="<%= c.images[0].url  %> " alt="">
                        <% }else{ %> 
                            <img class="img-fluid" src="https://res.cloudinary.com/deupkqjvg/image/upload/v1667284640/YelpCamp/z1td4mzcsvimlruczfyy.jpg " alt="">
                            <% } %> 
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-tittle"><%= c.tittle %> </h5>
                            
                            <p class="card-text"><%= c.description %> </p>
                            <p class="card-text">
                                <small class="text-muted"><%= c.location %></small>
                            </p>
                            <a class="btn btn-primary" href="/campground/<%= c._id %>">View <%= c.tittle %> </a>
                        </div>
                    </div>
                </div>
            </div>
             <% } %>
    
     

<script>

   const campgroundmapi =  '<%- JSON.stringify(cground) %>'
    const campgroundmapij = { features: JSON.parse(campgroundmapi) }

                // TO MAKE THE MAP APPEAR YOU MUST
                    // ADD YOUR ACCESS TOKEN FROM
                    // https://account.mapbox.com
                    mapboxgl.accessToken = 'pk.eyJ1IjoidG90b24wMDciLCJhIjoiY2twcXpxdjNvMDBtejJ1bzFxOHdtZHIycSJ9.K437PRr3A98Nj0st5sIHSg';
                const map = new mapboxgl.Map({
                container: 'map',
                // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
                style: 'mapbox://styles/mapbox/dark-v10',
                center: [-103.5917, 40.6699],
                zoom: 3
                });
                 
                map.on('load', () => {
                   // console.log('Map loaded')
                // Add a new source from our GeoJSON data and
                // set the 'cluster' option to true. GL-JS will
                // add the point_count property to your source data.
                map.addSource('campgroundmapij', {
                type: 'geojson',
                // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
                // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
                data: campgroundmapij,
                //data: 'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson',
                cluster: true,
                clusterMaxZoom: 14, // Max zoom to cluster points on
                clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
                });
                 
                map.addLayer({
                id: 'clusters',
                type: 'circle',
                source: 'campgroundmapij',
                filter: ['has', 'point_count'],
                paint: {
                // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                // with three steps to implement three types of circles:
                //   * Blue, 20px circles when point count is less than 100
                //   * Yellow, 30px circles when point count is between 100 and 750
                //   * Pink, 40px circles when point count is greater than or equal to 750
                'circle-color': [
                'step',
                ['get', 'point_count'],
                'red',
                10,
                'orange',
                30,
                'yellow'
                ],
                'circle-radius': [
                'step',
                ['get', 'point_count'],
                20,
                10,
                30,
                30,
                40
                ]
                }
                });
                 
                map.addLayer({
                id: 'cluster-count',
                type: 'symbol',
                source: 'campgroundmapij',
                filter: ['has', 'point_count'],
                layout: {
                'text-field': '{point_count_abbreviated}',
                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-size': 12
                }
                });
                 
                map.addLayer({
                id: 'unclustered-point',
                type: 'circle',
                source: 'campgroundmapij',
                filter: ['!', ['has', 'point_count']],
                paint: {
                'circle-color': '#11b4da',
                'circle-radius': 4,
                'circle-stroke-width': 1,
                'circle-stroke-color': '#fff'
                }
                });
                 
                // inspect a cluster on click
                map.on('click', 'clusters', (e) => {
                    
                const features = map.queryRenderedFeatures(e.point, {
                layers: ['clusters']
                });
                const clusterId = features[0].properties.cluster_id;
                map.getSource('campgroundmapij').getClusterExpansionZoom(
                clusterId,
                (err, zoom) => {
                if (err) return;
                 
                map.easeTo({
                center: features[0].geometry.coordinates,
                zoom: zoom
                });
                }
                );
                });
                 
                // When a click event occurs on a feature in
                // the unclustered-point layer, open a popup at
                // the location of the feature, with
                // description HTML from its properties.
                map.on('click', 'unclustered-point', (e) => {
                   const text =e.features[0].properties.popUpMarkup;
                const coordinates = e.features[0].geometry.coordinates.slice();
                const mag = e.features[0].properties.mag;
                // const tsunami =
                // e.features[0].properties.tsunami === 1 ? 'yes' : 'no';
                 
                // Ensure that if the map is zoomed out such that
                // multiple copies of the feature are visible, the
                // popup appears over the copy being pointed to.
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }
                 
                new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML(
                        text
                )
                .addTo(map);
                });
                 
                map.on('mouseenter', 'clusters', () => {
                   // console.log('Mousing Over a Cluster')
                map.getCanvas().style.cursor = 'pointer';
                });
                map.on('mouseleave', 'clusters', () => {
                map.getCanvas().style.cursor = '';
                });
                });
                
                </script>